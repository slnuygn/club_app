\documentclass[11pt, a4paper]{article}

% --- PACKAGES ---
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{amsmath, amssymb} % For math symbols
\usepackage{graphicx} % For including figures
\usepackage[dvipsnames]{xcolor} % For colors, useful for emphasis
\usepackage{geometry} % For setting page margins
\usepackage{hyperref} % To create hyperlinks and a PDF bookmark
\usepackage{fancyhdr} % For customizing headers/footers
\usepackage{booktabs} % For professional-looking tables
\usepackage{setspace} % For line spacing

% --- CONFIGURATION ---
\geometry{
 a4paper,
 total={170mm,257mm},
 left=25mm,
 right=25mm,
 top=30mm,
 bottom=30mm,
 }

% Header and Footer Setup
\pagestyle{fancy}
\fancyhead{} % Clear all header fields
\fancyfoot{} % Clear all footer fields
\fancyhead[L]{\textit{Huddle: Centralizing University Event Communication}}
\fancyhead[R]{\textit{\thetitle}}
\fancyfoot[C]{\thepage}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

% Document Metadata
\title{\textbf{\textcolor{RoyalBlue}{Huddle: \\ [0.5em] Centralizing University Event Communication}}}
\author{
    \textbf{} Selin Uygun \\
    \textit{Software Engineering} \\
    \textit{Email: selinuygun2@posta.mu.edu.tr}
}
\date{}

% --- BIBLIOGRAPHY CONFIGURATION ---
% If you use BibTeX for references, uncomment the lines below and
% replace 'references' with the name of your .bib file.
% \usepackage[backend=biber, style=apa]{biblatex}
% \addbibresource{references.bib}
% Or, if manually citing:
\newcommand{\mycitation}[1]{\textsuperscript{[#1]}}

% --- BEGIN DOCUMENT ---
\begin{document}
\onehalfspacing % Set line spacing to 1.5

\maketitle % Generate the title page

\thispagestyle{empty} % No page number on the title page

\newpage
\tableofcontents % Generate a table of contents

\newpage
\setcounter{page}{1} % Start page numbering from 1 for the main content

% ----------------------------------------------------------------
\section{Abstract}
% ----------------------------------------------------------------
\addcontentsline{toc}{section}{Abstract} % Manually add Abstract to TOC
\begin{abstract}
This project addresses the critical problem of fragmented event communication across university campuses, where students and club members must monitor multiple disparate channels—including email lists, social media platforms, private messaging groups, and physical bulletin boards—to track relevant campus activities, resulting in missed events, low engagement, and administrative inefficiency. The proposed solution, Huddle, is a centralized digital platform designed to serve as the single authoritative hub for all university club event information. Our approach employs a serverless, cross-platform architecture built with Flutter/Dart for the client application and Google Firebase for backend services, including Cloud Firestore for real-time data synchronization, Firebase Authentication for secure Google Sign-In, and Cloud Storage for media management. The platform's core innovation lies in its user-centric notification system, which allows students to favorite specific organizations and receive personalized, real-time push notifications about event updates, schedule changes, and deadlines. The anticipated results include a fully functional cross-platform mobile application (iOS and Android), demonstrable reduction in administrative overhead for club leadership, enhanced information reliability through a single source of truth, and significantly improved student engagement through proactive, personalized event alerts. This solution fundamentally transforms passive event discovery into active, streamlined community participation.

\end{abstract}

\newpage
% ----------------------------------------------------------------
\section{Introduction}
% ----------------------------------------------------------------
\label{sec:introduction}
\subsection{Background and Motivation}
The university club ecosystem is vital for campus community and enrichment; however, the dissemination of information regarding events and activities currently suffers from a high degree of fragmentation. Members and prospective participants are consistently required to monitor numerous disparate communication channels—including various email lists, private group chats, physical bulletin boards, and external social media platforms—to accurately track relevant updates. This scattered approach introduces significant informational friction and increases the probability of crucial events or deadlines being overlooked.

This project directly addresses this organizational inefficiency by proposing the development of a centralized digital application platform. This application is designed to function as the single, authoritative hub where all registered campus communities can submit their event logistics, including accurate dates and times, in a uniform and readily accessible format.

The primary intellectual and practical significance of this platform is rooted in its capacity to streamline student engagement and improve organizational transparency. By aggregating event announcements, the system effectively combats the problem of information overload. Furthermore, the core innovation lies in the inclusion of a dedicated user-centric notification feature. This system permits individuals to proactively favorite specific organizations or events, ensuring they receive timely, highly relevant alerts—such as reminders for meetings, changes to schedules, or approaching sign-up deadlines—directly to their devices, thus eliminating the necessity for continuous, manual monitoring of external channels.

In summary, this platform is indispensable because it resolves a critical communication breakdown, resulting in a more informed, cohesive, and actively engaged student community.


What is the current state of the art or existing solution? Establish the intellectual or practical significance of your project.



\subsection{Problem Statement}

Despite the high volume of co-curricular activity on campus, the current operational model is unsustainable and results in measurable losses in efficiency and engagement. The precise challenge we aim to resolve is the \textbf{absence of a dedicated, centralized, and authoritative data source} for student organization activities.

This deficiency manifests in three critical areas:

\begin{enumerate}
    \item \textbf{Administrative Overhead and Resource Misallocation:} Club leadership is currently burdened with the requirement to dedicate excessive time to duplicate event postings across multiple distinct platforms (e.g., various social media, private messaging services, and departmental newsletters). This results in high administrative overhead, diverting valuable effort away from core organizational and planning activities.

    \item \textbf{Informational Reliability and Data Integrity:} The decentralized nature of current communication inhibits consistency. Changes to event logistics---such as last-minute venue or time adjustments---often propagate inconsistently across platforms, leading to members receiving contradictory or outdated information. This lack of a single ``source of truth'' erodes user confidence and reliability.

    \item \textbf{Barrier to Passive Engagement and Retention:} The existing environment supports only passive student engagement, requiring continuous manual monitoring. The fundamental gap is the missing integrated functionality that connects official club data submission directly with personalized, push-notification student alerting. This inability to proactively notify interested users, such as through a ``favoriting'' system, is a key factor contributing to low event attendance and reduced community cohesion.
\end{enumerate}

My project is specifically designed to fill this critical gap by providing the integrated platform necessary to bridge official communication with personalized, real-time user engagement.

\subsection{Overall Project Goal}
The overarching aim of this project is to establish a definitive, centralized communications hub for all university clubs to overcome informational fragmentation, thereby significantly enhancing the efficiency of club leadership and driving higher rates of proactive student participation in campus life through reliable, real-time engagement features.

% ----------------------------------------------------------------
\section{Methodology and Work Plan}
% ----------------------------------------------------------------
\label{sec:methodology}
\subsection{Approach and Methods}

The project will employ a highly scalable, reactive, and cross-platform architecture based on a serverless Model-View-Controller (MVC) approach. This methodology ensures rapid development, native performance, and robust security by leveraging cloud-native services.

\subsection{Architecture Overview (The "How")}

The application utilizes a \textbf{three-tier serverless architecture} that decouples the client interface from the backend persistence and authentication layers:
\begin{enumerate}
    \item \textbf{Client Tier:} A single codebase manages the user interface and local application state.
    \item \textbf{Authentication/Logic Tier:} Firebase services manage user identity and, where necessary, execute secure backend logic via Cloud Functions.
    \item \textbf{Data Tier:} A NoSQL database provides real-time data synchronization across all user devices.
\end{enumerate}

\begin{table}[h!]
    \centering
    \caption{Core Technology Stack Rationale}
    \begin{tabular}{p{0.2\textwidth} p{0.2\textwidth} p{0.5\textwidth}}
        \toprule
        \textbf{Component} & \textbf{Technology} & \textbf{Rationale} \\
        \midrule
        \textbf{Frontend/Client} & \textbf{Flutter} and \textbf{Dart} & Chosen for its unified codebase, enabling deployment to iOS and Android (and potentially web/desktop) from a single source file, drastically reducing development time and maintenance overhead. \\
        \textbf{Backend Services} & \textbf{Google Firebase} & Provides a comprehensive suite of pre-built tools (Authentication, Database, Storage) that abstract away traditional server management, allowing the focus to remain on core application features. \\
        \bottomrule
    \end{tabular}
\end{table}

\subsection{Client-Side Development with Flutter}

The client application will be built using the \textbf{Flutter framework} and the \textbf{Dart programming language}. The development process will follow these steps:

\begin{itemize}
    \item \textbf{State Management:} A robust state management pattern (e.g., Provider or Riverpod) will be implemented to efficiently manage global and local application state. This is crucial for handling real-time data updates received from the backend.
    \item \textbf{Reactive UI:} The UI will be built reactively, meaning widgets automatically rebuild and reflect changes immediately when the underlying data stream (from Firestore) is updated, providing a seamless user experience.
    \item \textbf{API Integration:} The official FlutterFire packages will be used for direct, typed integration with Firebase services, minimizing API boilerplate code.
\end{itemize}

\subsection{Backend Services and Data Management}

\textbf{Firebase} is selected for all backend requirements, specifically utilizing \textbf{Cloud Firestore} for structured data persistence and \textbf{Cloud Storage for Firebase} for unstructured data and media files.

\begin{itemize}
    \item \textbf{Database Structure (Cloud Firestore):} Data will be stored in Cloud Firestore, a flexible, scalable NoSQL database. Data modeling will be denormalized where appropriate to optimize for fast read queries required by the application's screens.
    \item \textbf{Media Storage (Cloud Storage for Firebase):} Unstructured data, such as user profile pictures and uploaded images, will be stored in Cloud Storage. This ensures efficient file handling and keeps the primary database (Firestore) optimized for document reads, adhering to best practices for data separation.
    \item \textbf{Real-time Synchronization:} Core data sets will utilize Firestore’s real-time listeners. This means the client application automatically maintains a copy of the server data, fetching updates instantly and efficiently without manual polling.
    \item \textbf{Atomic Operations:} Firestore transactions will be implemented for complex, multi-step operations (e.g., ensuring inventory is decremented only if payment is successfully processed) to maintain data integrity.
\end{itemize}

\subsection{Security and Authorization}

The security model is built on Google's established infrastructure, significantly mitigating common security risks associated with managing user credentials and server infrastructure.

\begin{itemize}
    \item \textbf{Primary Authentication:} \textbf{Firebase Authentication} will be configured to use \textbf{Google Sign-In}. This approach ensures that:
    \begin{enumerate}
        \item The application never handles or stores user passwords, as the credentials reside securely with Google.
        \item The authentication flow is standardized, providing high reliability and security guarantees.
    \end{enumerate}
    \item \textbf{Authorization and Data Access Control:} This is the most critical custom security step. All data access will be enforced using \textbf{Firestore Security Rules} (for documents) and \textbf{Storage Security Rules} (for files). These server-side rules are mandatory and operate as follows:
    \begin{itemize}
        \item All read/write operations will be denied by default.
        \item Explicit rules will be written to check the authenticated user's ID (\texttt{request.auth.uid}) against the document/file owner's ID, ensuring that only the authenticated owner can modify or read their private data.
        \item This provides granular, server-enforced access control, preventing unauthorized clients from bypassing intended permissions.
    \end{itemize}
    \item \textbf{Data Integrity:} Input validation will be performed both client-side (for immediate feedback) and server-side via \textbf{Firestore Security Rules} (for definitive protection) to ensure that only well-formed data is written to the database.
\end{itemize}

\subsection{Development Environment and Workflow}

To ensure high productivity, maintain code quality, and facilitate collaborative development, the project team will utilize industry-standard tools for coding and version control:

\begin{itemize}
    \item \textbf{Integrated Development Environment (IDE):} \textbf{Visual Studio Code (VS Code)} will serve as the primary IDE. It is selected for its lightweight nature, robust support for Dart/Flutter through dedicated extensions, and seamless integration with Git and collaborative tools.
    \item \textbf{Version Control:} \textbf{GitHub} will be used exclusively for repository hosting and version control. A standard branching strategy (e.g., GitHub Flow) will be enforced to manage feature development, code reviews via Pull Requests, and releases, ensuring a clean and auditable history.
    \item \textbf{AI-Assisted Development:} The project will leverage \textbf{GitHub Copilot} within VS Code. This AI coding assistant will accelerate development by providing intelligent, real-time code suggestions, boilerplate generation, and initial unit test scaffolding, allowing developers to focus on higher-level problem-solving.
\end{itemize}

\subsection{Work Breakdown and Timeline}

\begin{table}[h]
\centering
\caption{Project Timeline and Deliverables}
\label{tab:timeline_dates}
\begin{tabular}{llc}
\toprule
\textbf{Phase/Task} & \textbf{Key Deliverable} & \textbf{Date Range} \\
\midrule
Phase 1: Research \& Design & Full UI\&UX Design & Sep 15 - Oct 08 \\
Phase 2: Implementation & Functional Prototype & Oct 09 - Nov 26 \\
Phase 3: Testing \& Evaluation & Performance Report & Nov 27 - Dec 14 \\
Phase 4: Documentation & Final Product \& Report & Dec 15 - Dec 26 \\
\bottomrule
\end{tabular}
\end{table}

% ----------------------------------------------------------------
\section{Design and User Interface}
% ----------------------------------------------------------------
\label{sec:design}

This section presents the visual design and user interface mockups for the Huddle application. The design philosophy prioritizes intuitive navigation, visual clarity, and seamless user experience across different screen sizes and platforms.

\subsection{Application Screens}

\begin{figure}[h!]
    \centering
    \begin{minipage}{0.45\textwidth}
        \centering
        \includegraphics[width=0.9\textwidth]{home_page.png}
        \caption{Home Screen Design}
        \label{fig:home_page}
    \end{minipage}
    \hfill
    \begin{minipage}{0.45\textwidth}
        \centering
        \includegraphics[width=0.9\textwidth]{community_page.png}
        \caption{Community Profile Page Design}
        \label{fig:community_page}
    \end{minipage}
\end{figure}

\begin{figure}[h!]
    \centering
    \begin{minipage}{0.45\textwidth}
        \centering
        \includegraphics[width=0.9\textwidth]{myevents_page.png}
        \caption{Saved Events Page Design}
        \label{fig:my_events}
    \end{minipage}
    \hfill
    \begin{minipage}{0.45\textwidth}
        \centering
        \includegraphics[width=0.9\textwidth]{search_page.png}
        \caption{Search Page Design}
        \label{fig:search}
    \end{minipage}
\end{figure}

\newpage
% ----------------------------------------------------------------
\section{Expected Outcomes and Deliverables}
% ----------------------------------------------------------------
\label{sec:outcomes}
\begin{itemize}
 	\item \textbf{Cross-Platform Mobile Application (Prototype):} A fully functional \textbf{Flutter application}, deployed to both iOS and Android environments, integrated with Firebase Authentication (Google Sign-In) and demonstrating real-time data synchronization with Cloud Firestore.
 	\item \textbf{Comprehensive Technical Report:} A detailed report documenting the application's overall system architecture, including the data models, specific \textbf{Firestore and Storage security rules}, performance benchmarks, and deployment procedures.
 	\item \textbf{Technical Demonstration and Presentation:} A structured presentation summarizing core technical challenges, key project outcomes, and a detailed roadmap for future feature development and scaling.
 	\item \textbf{Version Controlled Codebase:} The complete source code, hosted on \textbf{GitHub}, adhering to a defined branching strategy and featuring extensive inline documentation and a clean commit history.
\end{itemize}

% ----------------------------------------------------------------
\section{Conclusion and Future Work}
% ----------------------------------------------------------------
\label{sec:conclusion}
This project successfully establishes a robust, serverless foundation for a scalable cross-platform application using the Flutter/Dart stack anchored by Google Firebase. The utilization of Firebase for authentication, real-time data (Firestore), and secure media handling (Cloud Storage) minimizes infrastructure overhead and ensures high reliability and security from day one. The project's main impact is demonstrating a highly efficient, modern development workflow integrating VS Code, GitHub, and GitHub Copilot to produce a scalable and functional prototype efficiently.

Beyond the initial scope, the immediate future work and logical extensions for this platform include:

\begin{itemize}
    \item \textbf{Offline Data Synchronization:} Implementing local data persistence using a package like Hive or Drift to ensure the application remains fully functional when disconnected from the internet, syncing data once connectivity is restored.
    \item \textbf{Serverless Scaling with Functions:} Integrating Cloud Functions for Firebase to handle computationally expensive tasks, transactional logic (e.g., payment processing via Stripe integration), or complex data migrations, abstracting server logic away from the client and further enhancing security.
    \item \textbf{Advanced Data Indexing:} As the user base grows, optimizing Firestore performance through deeper query analysis and the implementation of custom index configurations to maintain query speed and efficiency.
    \item \textbf{Internationalization (i18n) Support:} Implementing Flutter's native localization features to support multiple languages, enabling a wider international release.
\end{itemize}

\end{document}